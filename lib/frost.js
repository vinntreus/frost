var eventBuilder = require('./event-builder');
var idGeneratorDate = require('./id-generator-date');
var inMemoryStore = require('./in-memory-store');
var _ = require('lodash');

module.exports = function(options){
  options = options || {};
  var store = options.store || inMemoryStore;
  var idGenerator = options.idGenerator || idGeneratorDate;

  /*
  * Stores an event in underlying store
  * Events are always cloned to prevent accidental updates
  *
  * params: eventData => { 
  *     name - name of the event
  *     key - master key of the event (is sometimes called AggregateRootId)
  *     id - optional id, else generated by the idGenerator
  *     data - should be you eventdata/payload (but you can store it in any property you wish)  
  *    }
  */
  function storeEvent(eventData){
    var event = eventBuilder(eventData).withId(idGenerator).validate().build();
    store.save(event);
  }

  /*
  * Retrieve events stored in the master key (or AggregateRoot if you wish)
  * Events are always cloned to avoid accidental updates
  *
  * params : key => event master key
  */
  function getEvents(key){
    return _.map(store.get(key), function(event){
      return _.cloneDeep(event);
    });
  }

  return {
    add : storeEvent,
    getEventsFrom : getEvents,
    setIdGenerator : function(generatorFn){ idGenerator = generatorFn; },
    setStore : function(store){ store = store; }
  };
};